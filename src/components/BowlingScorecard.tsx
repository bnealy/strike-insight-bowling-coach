return (
Bowling Score Calculator

Enter your pins knocked down for each ball
{games.map((game, gameIndex) => (
setActiveGameId(game.id)}> Game {gameIndex + 1} {game.id === activeGameId ? '(Active)' : ''}
{game.frames.map((frame, frameIndex) => (
{frameIndex + 1}
{frameIndex === 9 ? ( <> {[0, 1, 2].map(ballIndex => (
{ setActiveGameId(game.id); handleBallClick(frameIndex, ballIndex); }} > {formatBall(frame.balls[ballIndex], frameIndex, ballIndex)}
))} ) : ( <> {[0, 1].map(ballIndex => (
{ // Initialize games state - array of games const [games, setGames] = useState(() => [ { id: 1, frames: (() => { const initialFrames = []; for (let i = 0; i < 10; i++) { if (i === 9) { initialFrames.push({ balls: [null, null, null], score: null }); } else { initialFrames.push({ balls: [null, null], score: null }); } } return initialFrames; })(), currentFrame: 0, currentBall: 0, totalScore: 0, gameComplete: false, editingFrame: null, editingBall: null } ]); const [activeGameId, setActiveGameId] = useState(1); // Get current active game const activeGame = games.find(game => game.id === activeGameId); const frames = activeGame.frames; const currentFrame = activeGame.currentFrame; const currentBall = activeGame.currentBall; const totalScore = activeGame.totalScore; const gameComplete = activeGame.gameComplete; const editingFrame = activeGame.editingFrame; const editingBall = activeGame.editingBall; // Update active game const updateActiveGame = (updates) => { setGames(prevGames => prevGames.map(game => game.id === activeGameId ? { ...game, ...updates } : game ) ); }; // Calculate scores whenever games change useEffect(() => { calculateScoresForGame(activeGameId); }, [games, activeGameId]); const isStrike = (frameIndex, gameFrames = frames) => { return gameFrames[frameIndex].balls[0] === 10; }; const isSpare = (frameIndex, gameFrames = frames) => { if (frameIndex === 9) return false; return !isStrike(frameIndex, gameFrames) && gameFrames[frameIndex].balls[0] + gameFrames[frameIndex].balls[1] === 10; }; const getNextTwoBalls = (frameIndex, gameFrames = frames) => { if (frameIndex >= 9) return [0, 0]; const nextFrame = gameFrames[frameIndex + 1]; if (isStrike(frameIndex + 1, gameFrames)) { if (frameIndex + 1 === 9) { return [nextFrame.balls[0] || 0, nextFrame.balls[1] || 0]; } else { const frameAfterNext = gameFrames[frameIndex + 2]; return [nextFrame.balls[0] || 0, frameAfterNext?.balls[0] || 0]; } } else { return [nextFrame.balls[0] || 0, nextFrame.balls[1] || 0]; } }; const getNextBall = (frameIndex, gameFrames = frames) => { if (frameIndex >= 9) return 0; const nextFrame = gameFrames[frameIndex + 1]; return nextFrame.balls[0] || 0; }; const calculateFrameScore = (frameIndex, gameFrames = frames) => { const frame = gameFrames[frameIndex]; if (frameIndex === 9) { let total = 0; for (let i = 0; i < 3; i++) { if (frame.balls[i] !== null) { total += frame.balls[i]; } } return total; } if (isStrike(frameIndex, gameFrames)) { const [next1, next2] = getNextTwoBalls(frameIndex, gameFrames); return 10 + next1 + next2; } else if (isSpare(frameIndex, gameFrames)) { const nextBall = getNextBall(frameIndex, gameFrames); return 10 + nextBall; } else { return (frame.balls[0] || 0) + (frame.balls[1] || 0); } }; const calculateScoresForGame = (gameId) => { const game = games.find(g => g.id === gameId); if (!game) return; const gameFrames = game.frames; const newFrames = [...gameFrames]; let runningTotal = 0; let allFramesComplete = true; for (let i = 0; i < 10; i++) { const frame = newFrames[i]; let canScore = false; if (i === 9) { if (frame.balls[0] === 10) { canScore = frame.balls[1] !== null && frame.balls[2] !== null; } else if ((frame.balls[0] || 0) + (frame.balls[1] || 0) === 10) { canScore = frame.balls[2] !== null; } else { canScore = frame.balls[1] !== null; } } else { if (isStrike(i, gameFrames)) { const [next1, next2] = getNextTwoBalls(i, gameFrames); canScore = next1 !== 0 || next2 !== 0 || i >= 8; } else if (frame.balls[1] !== null) { if (isSpare(i, gameFrames)) { const nextBall = getNextBall(i, gameFrames); canScore = nextBall !== 0 || i >= 8; } else { canScore = true; } } } if (canScore) { const frameScore = calculateFrameScore(i, gameFrames); runningTotal += frameScore; newFrames[i].score = runningTotal; } else { newFrames[i].score = null; allFramesComplete = false; } } updateActiveGame({ frames: newFrames, totalScore: runningTotal, gameComplete: allFramesComplete && newFrames[9].score !== null }); }; const enterPins = (pins) => { const newFrames = [...frames]; let targetFrame, targetBall; if (editingFrame !== null && editingBall !== null) { targetFrame = editingFrame; targetBall = editingBall; } else { targetFrame = currentFrame; targetBall = currentBall; } const frame = newFrames[targetFrame]; if (editingFrame !== null && editingBall !== null) { if (targetFrame === 9) { for (let i = targetBall; i < 3; i++) { frame.balls[i] = null; } } else { for (let i = targetBall; i < 2; i++) { frame.balls[i] = null; } } // Only clear scores, not the ball data from subsequent frames for (let i = targetFrame; i < 10; i++) { newFrames[i].score = null; } } if (targetFrame < 9) { if (targetBall === 0) { if (pins > 10) return; frame.balls[0] = pins; if (editingFrame !== null) { if (pins === 10) { updateActiveGame({ frames: newFrames, editingFrame: null, editingBall: null, currentFrame: targetFrame < 9 ? targetFrame + 1 : targetFrame, currentBall: 0 }); } else { updateActiveGame({ frames: newFrames, editingBall: 1 }); } } else { if (pins === 10) { updateActiveGame({ frames: newFrames, currentFrame: currentFrame + 1, currentBall: 0 }); } else { updateActiveGame({ frames: newFrames, currentBall: 1 }); } } } else if (targetBall === 1) { if ((frame.balls[0] || 0) + pins > 10) return; frame.balls[1] = pins; if (editingFrame !== null) { updateActiveGame({ frames: newFrames, editingFrame: null, editingBall: null, currentFrame: targetFrame < 9 ? targetFrame + 1 : targetFrame, currentBall: 0 }); } else { updateActiveGame({ frames: newFrames, currentFrame: currentFrame + 1, currentBall: 0 }); } } } else { if (targetBall === 0) { if (pins > 10) return; frame.balls[0] = pins; if (editingFrame !== null) { updateActiveGame({ frames: newFrames, editingBall: 1 }); } else { updateActiveGame({ frames: newFrames, currentBall: 1 }); } } else if (targetBall === 1) { if (frame.balls[0] === 10) { if (pins > 10) return; frame.balls[1] = pins; if (editingFrame !== null) { updateActiveGame({ frames: newFrames, editingBall: 2 }); } else { updateActiveGame({ frames: newFrames, currentBall: 2 }); } } else { if ((frame.balls[0] || 0) + pins > 10) return; frame.balls[1] = pins; if ((frame.balls[0] || 0) + pins === 10) { if (editingFrame !== null) { updateActiveGame({ frames: newFrames, editingBall: 2 }); } else { updateActiveGame({ frames: newFrames, currentBall: 2 }); } } else { updateActiveGame({ frames: newFrames, editingFrame: null, editingBall: null, currentBall: 3 }); } } } else if (targetBall === 2) { if (frame.balls[0] === 10) { if (pins > 10) return; frame.balls[2] = pins; } else if ((frame.balls[0] || 0) + (frame.balls[1] || 0) === 10) { if (pins > 10) return; frame.balls[2] = pins; } else { return; } updateActiveGame({ frames: newFrames, editingFrame: null, editingBall: null, currentBall: 3 }); } } }; const addAnotherGame = () => { if (games.length >= 2) return; // Max 2 games const newGameId = Math.max(...games.map(g => g.id)) + 1; const newGame = { id: newGameId, frames: (() => { const initialFrames = []; for (let i = 0; i < 10; i++) { if (i === 9) { initialFrames.push({ balls: [null, null, null], score: null }); } else { initialFrames.push({ balls: [null, null], score: null }); } } return initialFrames; })(), currentFrame: 0, currentBall: 0, totalScore: 0, gameComplete: false, editingFrame: null, editingBall: null }; setGames(prevGames => [...prevGames, newGame]); setActiveGameId(newGameId); }; const clearGame = (gameId) => { const game = games.find(g => g.id === gameId); if (!game) return; const clearedFrames = []; for (let i = 0; i < 10; i++) { if (i === 9) { clearedFrames.push({ balls: [null, null, null], score: null }); } else { clearedFrames.push({ balls: [null, null], score: null }); } } setGames(prevGames => prevGames.map(g => g.id === gameId ? { ...g, frames: clearedFrames, currentFrame: 0, currentBall: 0, totalScore: 0, gameComplete: false, editingFrame: null, editingBall: null } : g ) ); }; const formatBall = (ball, frameIndex, ballIndex) => { if (ball === null) return ''; if (ball === 0) return '-'; if (ball === 10) { return 'X'; } if (frameIndex < 9 && ballIndex === 1) { const frame = frames[frameIndex]; if ((frame.balls[0] || 0) + ball === 10) return '/'; } else if (frameIndex === 9 && ballIndex === 1 && frames[9].balls[0] !== 10) { if ((frames[9].balls[0] || 0) + ball === 10) return '/'; } else if (frameIndex === 9 && ballIndex === 2 && frames[9].balls[1] !== 10) { if ((frames[9].balls[1] || 0) + ball === 10) return '/'; } return ball.toString(); }; const handleBallClick = (frameIndex, ballIndex) => { if (frames[frameIndex].balls[ballIndex] === null && !(frameIndex === currentFrame && ballIndex === currentBall) && !gameComplete) { return; } if (gameComplete && frames[frameIndex].balls[ballIndex] === null) { return; } updateActiveGame({ editingFrame: frameIndex, editingBall: ballIndex }); }; const cancelEdit = () => { updateActiveGame({ editingFrame: null, editingBall: null }); }; const getPinButtons = () => { const activeFrame = editingFrame !== null ? editingFrame : currentFrame; const activeBall = editingBall !== null ? editingBall : currentBall; if (activeFrame >= 10 || activeBall >= 3) return []; const buttons = []; let maxPins = 10; if (activeFrame < 9) { if (activeBall === 1) { maxPins = 10 - (frames[activeFrame].balls[0] || 0); } } else { // 10th frame logic if (activeBall === 1 && frames[9].balls[0] === 10) { // After a strike in 10th frame, second ball can be 0-10 maxPins = 10; } else if (activeBall === 1 && frames[9].balls[0] !== 10) { // After non-strike in 10th frame, normal spare logic maxPins = 10 - (frames[9].balls[0] || 0); } else if (activeBall === 2) { // Third ball in 10th frame if (frames[9].balls[0] === 10) { // First ball was strike if (frames[9].balls[1] === 10) { // Strike-Strike, third ball can be 0-10 maxPins = 10; } else { // Strike-NonStrike, third ball limited by second ball maxPins = 10 - (frames[9].balls[1] || 0); } } else if ((frames[9].balls[0] || 0) + (frames[9].balls[1] || 0) === 10) { // First two balls made a spare, third ball can be 0-10 maxPins = 10; } else { // Should not happen - no third ball for open frame maxPins = 0; } } } for (let i = 0; i <= maxPins; i++) { buttons.push(
); } return buttons; }; fontWeight: 'bold', fontSize: '16px', cursor: 'pointer', backgroundColor: (game.id === activeGameId && game.editingFrame === frameIndex && game.editingBall === ballIndex) ? '#fff3cd' : '#f8f9fa' }} onClick={() => { setActiveGameId(game.id); handleBallClick(frameIndex, ballIndex); }} > {formatBall(frame.balls[ballIndex], frameIndex, ballIndex)}
))} )}
{frame.score !== null ? frame.score : ''}
))}
Total Score: {game.totalScore}
{game.gameComplete && (
🎉 Game Complete! Final Score: {game.totalScore}
)}
))}
{(!gameComplete || editingFrame !== null) && ( <>
{editingFrame !== null && editingBall !== null ? ( <> Editing Game {games.findIndex(g => g.id === activeGameId) + 1}, Frame {editingFrame + 1}, Ball {editingBall + 1}
) : gameComplete ? ( "Click any ball to edit" ) : ( `Game ${games.findIndex(g => g.id === activeGameId) + 1} - Frame ${currentFrame + 1}, Ball ${currentBall + 1}` )}
{getPinButtons().map((button, index) => (
{button.props.children}
))}
)}
{games.length < 2 && (
)}
); }; export default BowlingScorecard;