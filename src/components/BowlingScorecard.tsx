import React, { useState, useEffect } from 'react'; const BowlingScorecard = () => { // Initialize game state const [frames, setFrames] = useState(() => { const initialFrames = []; for (let i = 0; i < 10; i++) { if (i === 9) { // 10th frame initialFrames.push({ balls: [null, null, null], score: null }); } else { initialFrames.push({ balls: [null, null], score: null }); } } return initialFrames; }); const [currentFrame, setCurrentFrame] = useState(0); const [currentBall, setCurrentBall] = useState(0); const [totalScore, setTotalScore] = useState(0); const [gameComplete, setGameComplete] = useState(false); const [editingFrame, setEditingFrame] = useState(null); const [editingBall, setEditingBall] = useState(null); // Calculate scores whenever frames change useEffect(() => { calculateScores(); }, [frames]); const isStrike = (frameIndex) => { return frames[frameIndex].balls[0] === 10; }; const isSpare = (frameIndex) => { if (frameIndex === 9) return false; // 10th frame spares handled differently return !isStrike(frameIndex) && frames[frameIndex].balls[0] + frames[frameIndex].balls[1] === 10; }; const getNextTwoBalls = (frameIndex) => { if (frameIndex >= 9) return [0, 0]; // No next balls after 10th frame const nextFrame = frames[frameIndex + 1]; if (isStrike(frameIndex + 1)) { // Next frame is a strike if (frameIndex + 1 === 9) { // Next frame is 10th frame return [nextFrame.balls[0] || 0, nextFrame.balls[1] || 0]; } else { // Look at frame after next const frameAfterNext = frames[frameIndex + 2]; return [nextFrame.balls[0] || 0, frameAfterNext?.balls[0] || 0]; } } else { // Next frame is not a strike return [nextFrame.balls[0] || 0, nextFrame.balls[1] || 0]; } }; const getNextBall = (frameIndex) => { if (frameIndex >= 9) return 0; // No next ball after 10th frame const nextFrame = frames[frameIndex + 1]; return nextFrame.balls[0] || 0; }; const calculateFrameScore = (frameIndex) => { const frame = frames[frameIndex]; if (frameIndex === 9) { // 10th frame scoring let total = 0; for (let i = 0; i < 3; i++) { if (frame.balls[i] !== null) { total += frame.balls[i]; } } return total; } // Regular frames (1-9) if (isStrike(frameIndex)) { const [next1, next2] = getNextTwoBalls(frameIndex); return 10 + next1 + next2; } else if (isSpare(frameIndex)) { const nextBall = getNextBall(frameIndex); return 10 + nextBall; } else { return (frame.balls[0] || 0) + (frame.balls[1] || 0); } }; const calculateScores = () => { const newFrames = [...frames]; let runningTotal = 0; let allFramesComplete = true; for (let i = 0; i < 10; i++) { const frame = newFrames[i]; // Check if frame is complete enough to score let canScore = false; if (i === 9) { // 10th frame: need all applicable balls if (frame.balls[0] === 10) { canScore = frame.balls[1] !== null && frame.balls[2] !== null; } else if ((frame.balls[0] || 0) + (frame.balls[1] || 0) === 10) { canScore = frame.balls[2] !== null; } else { canScore = frame.balls[1] !== null; } } else { // Regular frames if (isStrike(i)) { // Need next two balls to score const [next1, next2] = getNextTwoBalls(i); canScore = next1 !== 0 || next2 !== 0 || i >= 8; // Can score if we have next balls or it's frame 9 } else if (frame.balls[1] !== null) { if (isSpare(i)) { // Need next ball to score const nextBall = getNextBall(i); canScore = nextBall !== 0 || i >= 8; // Can score if we have next ball or it's frame 9 } else { // Open frame, can score immediately canScore = true; } } } if (canScore) { const frameScore = calculateFrameScore(i); runningTotal += frameScore; newFrames[i].score = runningTotal; } else { newFrames[i].score = null; allFramesComplete = false; } } setFrames(newFrames); setTotalScore(runningTotal); setGameComplete(allFramesComplete && newFrames[9].score !== null); }; const enterPins = (pins) => { const newFrames = [...frames]; let targetFrame, targetBall; // Determine if we're editing an existing frame or entering new data if (editingFrame !== null && editingBall !== null) { targetFrame = editingFrame; targetBall = editingBall; } else { targetFrame = currentFrame; targetBall = currentBall; } const frame = newFrames[targetFrame]; // If we're editing, clear the frame and recalculate from this point if (editingFrame !== null && editingBall !== null) { // Clear this ball and all subsequent balls in the frame if (targetFrame === 9) { // 10th frame for (let i = targetBall; i < 3; i++) { frame.balls[i] = null; } } else { // Regular frames for (let i = targetBall; i < 2; i++) { frame.balls[i] = null; } } // Clear all frames after this one for (let i = targetFrame + 1; i < 10; i++) { if (i === 9) { newFrames[i].balls = [null, null, null]; } else { newFrames[i].balls = [null, null]; } newFrames[i].score = null; } } // Validate input based on target frame if (targetFrame < 9) { // Regular frames (1-9) if (targetBall === 0) { if (pins > 10) return; // Can't knock down more than 10 pins frame.balls[0] = pins; if (editingFrame !== null) { // If editing, stay in edit mode but move to next ball if not a strike if (pins === 10) { setEditingFrame(null); setEditingBall(null); // Update current position for new input if (targetFrame < 9) { setCurrentFrame(targetFrame + 1); setCurrentBall(0); } } else { setEditingBall(1); } } else { // Normal input flow if (pins === 10) { // Strike - move to next frame setCurrentFrame(currentFrame + 1); setCurrentBall(0); } else { // Move to second ball setCurrentBall(1); } } } else if (targetBall === 1) { if ((frame.balls[0] || 0) + pins > 10) return; // Total can't exceed 10 frame.balls[1] = pins; if (editingFrame !== null) { setEditingFrame(null); setEditingBall(null); // Update current position for new input if (targetFrame < 9) { setCurrentFrame(targetFrame + 1); setCurrentBall(0); } } else { // Move to next frame setCurrentFrame(currentFrame + 1); setCurrentBall(0); } } } else { // 10th frame if (targetBall === 0) { if (pins > 10) return; frame.balls[0] = pins; if (editingFrame !== null) { setEditingBall(1); } else { setCurrentBall(1); } } else if (targetBall === 1) { // Second ball in 10th frame if (frame.balls[0] === 10) { if (pins > 10) return; frame.balls[1] = pins; if (editingFrame !== null) { setEditingBall(2); } else { setCurrentBall(2); } } else { if ((frame.balls[0] || 0) + pins > 10) return; frame.balls[1] = pins; if ((frame.balls[0] || 0) + pins === 10) { if (editingFrame !== null) { setEditingBall(2); } else { setCurrentBall(2); } } else { setEditingFrame(null); setEditingBall(null); setCurrentBall(3); } } } else if (targetBall === 2) { // Third ball in 10th frame if (frame.balls[0] === 10) { if (pins > 10) return; frame.balls[2] = pins; } else if ((frame.balls[0] || 0) + (frame.balls[1] || 0) === 10) { if (pins > 10) return; frame.balls[2] = pins; } else { return; } setEditingFrame(null); setEditingBall(null); setCurrentBall(3); } } setFrames(newFrames); }; const resetGame = () => { const initialFrames = []; for (let i = 0; i < 10; i++) { if (i === 9) { initialFrames.push({ balls: [null, null, null], score: null }); } else { initialFrames.push({ balls: [null, null], score: null }); } } setFrames(initialFrames); setCurrentFrame(0); setCurrentBall(0); setTotalScore(0); setGameComplete(false); setEditingFrame(null); setEditingBall(null); }; const formatBall = (ball, frameIndex, ballIndex) => { if (ball === null) return ''; if (ball === 0) return '-'; if (ball === 10) { if (frameIndex === 9 || ballIndex === 0) return 'X'; return 'X'; } // Check for spare if (frameIndex < 9 && ballIndex === 1) { const frame = frames[frameIndex]; if ((frame.balls[0] || 0) + ball === 10) return '/'; } else if (frameIndex === 9 && ballIndex === 1 && frames[9].balls[0] !== 10) { if ((frames[9].balls[0] || 0) + ball === 10) return '/'; } else if (frameIndex === 9 && ballIndex === 2 && frames[9].balls[1] !== 10) { if ((frames[9].balls[1] || 0) + ball === 10) return '/'; } return ball.toString(); }; const handleBallClick = (frameIndex, ballIndex) => { // Don't allow editing if the ball hasn't been thrown yet and we're not at this position if (frames[frameIndex].balls[ballIndex] === null && !(frameIndex === currentFrame && ballIndex === currentBall)) { return; } setEditingFrame(frameIndex); setEditingBall(ballIndex); }; const cancelEdit = () => { setEditingFrame(null); setEditingBall(null); }; if (currentFrame >= 10 || currentBall >= 3) return []; const buttons = []; let maxPins = 10; if (currentFrame < 9) { // Regular frames if (currentBall === 1) { maxPins = 10 - (frames[currentFrame].balls[0] || 0); } } else { // 10th frame if (currentBall === 1 && frames[9].balls[0] === 10) { // Second ball after a strike in 10th frame - no restrictions maxPins = 10; } else if (currentBall === 1 && frames[9].balls[0] !== 10) { // Second ball after non-strike in 10th frame - normal spare logic maxPins = 10 - (frames[9].balls[0] || 0); } else if (currentBall === 2) { // Third ball in 10th frame - no restrictions (can knock down up to 10 pins) maxPins = 10; } } for (let i = 0; i <= maxPins; i++) { buttons.push( ); } return buttons; }; const styles = { bowlingCalculator: { maxWidth: '1000px', margin: '0 auto', padding: '20px', fontFamily: 'Arial, sans-serif', background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', minHeight: '100vh' }, header: { textAlign: 'center' as const, color: 'white', marginBottom: '30px' }, headerTitle: { fontSize: '2.5em', marginBottom: '10px', margin: '0 0 10px 0' }, scorecard: { background: 'white', borderRadius: '15px', padding: '20px', marginBottom: '20px', boxShadow: '0 10px 30px rgba(0, 0, 0, 0.2)' }, framesContainer: { display: 'flex', gap: '2px', marginBottom: '20px' }, frame: { flex: 1, border: '2px solid #333', background: 'white', minHeight: '80px', position: 'relative' as const }, frameCurrent: { flex: 1, border: '2px solid #4CAF50', background: '#f0f8f0', minHeight: '80px', position: 'relative' as const }, tenthFrame: { flex: 1.5, border: '2px solid #333', background: 'white', minHeight: '80px', position: 'relative' as const }, tenthFrameCurrent: { flex: 1.5, border: '2px solid #4CAF50', background: '#f0f8f0', minHeight: '80px', position: 'relative' as const }, frameNumber: { position: 'absolute' as const, top: '2px', left: '4px', fontSize: '12px', fontWeight: 'bold' }, ballsRow: { display: 'flex', height: '40px', marginTop: '15px' }, ballsRowTenth: { display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', height: '40px', marginTop: '15px' }, ball: { flex: 1, borderRight: '1px solid #333', display: 'flex', alignItems: 'center', justifyContent: 'center', fontWeight: 'bold', fontSize: '16px', cursor: 'pointer', transition: 'background-color 0.2s ease' }, ballTenth: { borderRight: '1px solid #333', display: 'flex', alignItems: 'center', justifyContent: 'center', fontWeight: 'bold', fontSize: '16px', cursor: 'pointer', transition: 'background-color 0.2s ease' }, ballEditing: { backgroundColor: '#fff3cd', border: '2px solid #856404' }, ballClickable: { backgroundColor: '#f8f9fa' }, scoreRow: { height: '25px', borderTop: '1px solid #333', display: 'flex', alignItems: 'center', justifyContent: 'center', background: '#f5f5f5', fontWeight: 'bold', fontSize: '14px' }, totalScore: { textAlign: 'center' as const, fontSize: '2em', fontWeight: 'bold', color: '#333', margin: '20px 0' }, controls: { background: 'rgba(255, 255, 255, 0.1)', backdropFilter: 'blur(10px)', borderRadius: '15px', padding: '20px', textAlign: 'center' as const }, currentFrameInfo: { color: 'white', marginBottom: '20px', fontSize: '1.2em' }, pinButtons: { display: 'flex', flexWrap: 'wrap' as const, gap: '10px', justifyContent: 'center', marginBottom: '20px' }, pinButton: { width: '50px', height: '50px', border: 'none', borderRadius: '50%', background: '#4CAF50', color: 'white', fontSize: '18px', fontWeight: 'bold', cursor: 'pointer', transition: 'all 0.3s ease' }, resetButton: { background: '#f44336', color: 'white', border: 'none', padding: '15px 30px', borderRadius: '25px', fontSize: '16px', cursor: 'pointer', transition: 'background 0.3s ease' }, gameComplete: { background: '#4CAF50', color: 'white', padding: '20px', borderRadius: '10px', textAlign: 'center' as const, fontSize: '1.3em', marginBottom: '20px' } }; return (
🎳 Bowling Score Calculator

Enter your pins knocked down for each ball
{frames.map((frame, frameIndex) => { const isCurrent = frameIndex === currentFrame; const isTenth = frameIndex === 9; let frameStyle = styles.frame; if (isTenth && isCurrent) frameStyle = styles.tenthFrameCurrent; else if (isTenth) frameStyle = styles.tenthFrame; else if (isCurrent) frameStyle = styles.frameCurrent; return (
{frameIndex + 1}
{frameIndex === 9 ? ( // 10th frame - 3 balls <>
handleBallClick(frameIndex, 0)} onMouseEnter={(e) => { if (frames[frameIndex].balls[0] !== null || (frameIndex === currentFrame && 0 === currentBall)) { e.currentTarget.style.backgroundColor = '#e9ecef'; } }} onMouseLeave={(e) => { if (editingFrame === frameIndex && editingBall === 0) { e.currentTarget.style.backgroundColor = '#fff3cd'; } else if (frames[frameIndex].balls[0] !== null || (frameIndex === currentFrame && 0 === currentBall)) { e.currentTarget.style.backgroundColor = '#f8f9fa'; } else { e.currentTarget.style.backgroundColor = 'white'; } }} > {formatBall(frame.balls[0], frameIndex, 0)}
handleBallClick(frameIndex, 1)} onMouseEnter={(e) => { if (frames[frameIndex].balls[1] !== null || (frameIndex === currentFrame && 1 === currentBall)) { e.currentTarget.style.backgroundColor = '#e9ecef'; } }} onMouseLeave={(e) => { if (editingFrame === frameIndex && editingBall === 1) { e.currentTarget.style.backgroundColor = '#fff3cd'; } else if (frames[frameIndex].balls[1] !== null || (frameIndex === currentFrame && 1 === currentBall)) { e.currentTarget.style.backgroundColor = '#f8f9fa'; } else { e.currentTarget.style.backgroundColor = 'white'; } }} > {formatBall(frame.balls[1], frameIndex, 1)}
handleBallClick(frameIndex, 2)} onMouseEnter={(e) => { if (frames[frameIndex].balls[2] !== null || (frameIndex === currentFrame && 2 === currentBall)) { e.currentTarget.style.backgroundColor = '#e9ecef'; } }} onMouseLeave={(e) => { if (editingFrame === frameIndex && editingBall === 2) { e.currentTarget.style.backgroundColor = '#fff3cd'; } else if (frames[frameIndex].balls[2] !== null || (frameIndex === currentFrame && 2 === currentBall)) { e.currentTarget.style.backgroundColor = '#f8f9fa'; } else { e.currentTarget.style.backgroundColor = 'white'; } }} > {formatBall(frame.balls[2], frameIndex, 2)}
) : ( // Regular frames - 2 balls <>
handleBallClick(frameIndex, 0)} onMouseEnter={(e) => { if (frames[frameIndex].balls[0] !== null || (frameIndex === currentFrame && 0 === currentBall)) { e.currentTarget.style.backgroundColor = '#e9ecef'; } }} onMouseLeave={(e) => { if (editingFrame === frameIndex && editingBall === 0) { e.currentTarget.style.backgroundColor = '#fff3cd'; } else if (frames[frameIndex].balls[0] !== null || (frameIndex === currentFrame && 0 === currentBall)) { e.currentTarget.style.backgroundColor = '#f8f9fa'; } else { e.currentTarget.style.backgroundColor = 'white'; } }} > {formatBall(frame.balls[0], frameIndex, 0)}
handleBallClick(frameIndex, 1)} onMouseEnter={(e) => { if (frames[frameIndex].balls[1] !== null || (frameIndex === currentFrame && 1 === currentBall)) { e.currentTarget.style.backgroundColor = '#e9ecef'; } }} onMouseLeave={(e) => { if (editingFrame === frameIndex && editingBall === 1) { e.currentTarget.style.backgroundColor = '#fff3cd'; } else if (frames[frameIndex].balls[1] !== null || (frameIndex === currentFrame && 1 === currentBall)) { e.currentTarget.style.backgroundColor = '#f8f9fa'; } else { e.currentTarget.style.backgroundColor = 'white'; } }} > {formatBall(frame.balls[1], frameIndex, 1)}
)}
{frame.score !== null ? frame.score : ''}
); })}
Total Score: {totalScore}
{gameComplete && (
🎉 Game Complete! Final Score: {totalScore}
)}
{!gameComplete && ( <>
{editingFrame !== null && editingBall !== null ? ( <> Editing Frame {editingFrame + 1}, Ball {editingBall + 1}
) : ( `Frame ${currentFrame + 1}, Ball ${currentBall + 1}` )}
{getPinButtons().map((button, index) => (
))}
)} ); }; export default BowlingScorecard;